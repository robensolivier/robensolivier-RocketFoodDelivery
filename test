// implemented code
import React, { useState, useEffect } from 'react';
import {
  StyleSheet,
  Image,
  ScrollView,
  Text,
  TouchableOpacity,
  Modal,
  View
} from 'react-native';
import Container from 'react-bootstrap/Container';
import Row from 'react-bootstrap/Row';
import Col from 'react-bootstrap/Col';
import Form from 'react-bootstrap/Form';
import Button from 'react-bootstrap/Button';

import Cuisine from '../../assets/images/restaurants/cuisineViet.jpg';

const formatter = new Intl.NumberFormat('en-US', {
  style: 'currency',
  currency: 'USD',
});

export default function Menu({ route }) {
  const [products, setProducts] = useState([]);
  const { restaurant } = route.params;
  const [isProcessing, setIsProcessing] = useState(false);
  const [modalVisible, setModalVisible] = useState(false);
  const [selectedOrder, setSelectedOrder] = useState(null);
  const [isTextMessageSelected, setIsTextMessageSelected] = useState(false);
  const [isEmailSelected, setIsEmailSelected] = useState(false);

  useEffect(() => {
    const getProducts = async () => {
      try {
        setIsProcessing(true); // Set isProcessing to true while fetching data
        const fetchResponse = await fetch(`http://localhost:3000/api/products?restaurant=${restaurant.id}`);
        const data = await fetchResponse.json();
        if (data.error) {
          alert('Response Error');
        } else {
          setProducts(data);
        }
        setIsProcessing(false); // Set isProcessing back to false after data fetch is complete
      } catch (e) {
        alert('Failed fetch: ' + e.message);
        setIsProcessing(false); // Set isProcessing back to false on fetch error
      }
    };
    getProducts();
  }, []);

  const handleQuantityChange = (productId, quantity) => {
    const updatedProducts = products.map(product => {
      if (product.id === productId) {
        return {
          ...product,
          quantity: isNaN(quantity) ? 0 : quantity // Check for NaN and set to 0 if NaN
        };
      }
      return product;
    });
    setProducts(updatedProducts);
  };

  const handleIncrement = (productId) => {
    const updatedProducts = products.map(product => {
      if (product.id === productId) {
        return {
          ...product,
          quantity: isNaN(product.quantity) ? 1 : product.quantity + 1 // Check for NaN and set to 1 if NaN
        };
      }
      return product;
    });
    setProducts(updatedProducts);
  };

  const handleDecrement = (productId) => {
    const updatedProducts = products.map(product => {
      if (product.id === productId && product.quantity > 0) {
        return {
          ...product,
          quantity: isNaN(product.quantity) ? 0 : product.quantity - 1 // Check for NaN and set to 
          const handleAddToCart = async (order) => {
            try {
            setIsProcessing(true);
            const fetchResponse = await fetch('http://localhost:3000/api/orders', {
            method: 'POST',
            headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json'
            },
            body: JSON.stringify({
            customerId: 'CUSTOMER_ID',
            restaurantId: restaurant.id,
            orderItems: [{ productId: order.id, quantity: order.quantity }]
            })
            });
            const data = await fetchResponse.json();
            if (data.error) {
            alert('Order creation failed');
            } else {
            setSelectedOrder(null);
            setProducts(products.map(p => p.id === order.id ? { ...p, quantity: 0 } : p));
            alert('Order created successfully');
            // Send order confirmation notification by email and/or text message
            }
            setIsProcessing(false);
            } catch (e) {
            alert('Order creation failed: ' + e.message);
            setIsProcessing(false);
            }
            };
            
            return (
            <Container>
            <ScrollView contentContainerStyle={styles.container}>
            {isProcessing ? (
            <Text>Loading products...</Text>
            ) : (
            renderProducts()
            )}
            {renderOrderModal()}
            </ScrollView>
            <TouchableOpacity
            style={styles.confirmButton}
            disabled={selectedOrder === null || isProcessing}
            onPress={() => handleAddToCart(selectedOrder)}
            >
            <Text style={styles.confirmButtonText}>
            {isProcessing ? 'In Progress' : 'Confirm Order'}
            </Text>
            </TouchableOpacity>
            </Container>
            );
            }
            
            const styles = StyleSheet.create({
            container: {
            flexGrow: 1,
            padding: 20,
            backgroundColor: '#fff',
            },
            menuPic: {
            width: '100%',
            height: 200,
            resizeMode: 'cover',
            },
            orderBtn: {
            marginTop: 20,
            padding: 10,
            backgroundColor: '#f00',
            borderRadius: 10,
            alignSelf: 'flex-start',
            },
            orderBtnText: {
            color: '#fff',
            fontWeight: 'bold',
            },
            modalContainer: {
            flex: 1,
            justifyContent: 'center',
            alignItems: 'center',
            backgroundColor: 'rgba(0, 0, 0, 0.5)',
            },
            modalContent: {
            backgroundColor: '#fff',
            padding: 20,
            borderRadius: 10,
            minWidth: '70%',
            alignItems: 'center',
            },
            modalTitle: {
            fontSize: 20,
            fontWeight: 'bold',
            marginBottom: 10,
            },
            modalSubtitle: {
            fontSize: 16,
            marginBottom: 10,
            },
            modalText: {
            fontSize: 14,
            marginBottom: 20,
            },
            modalButtonsContainer: {
            flexDirection: 'row',
            justifyContent: 'center',
            },
            modalButton: {
            padding: 10,
            backgroundColor: '#f00',
            borderRadius: 10,
            margin: 10,
            },
            modalButtonText: {
            color: '#fff',
            fontWeight: 'bold',
            },
            confirmButton: {
            alignSelf: 'center',
            backgroundColor: '#f00',
            padding: 10,
            borderRadius: 10,
            marginTop: 20,
            marginBottom: 20,
            },
